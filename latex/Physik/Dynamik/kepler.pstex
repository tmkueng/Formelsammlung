%!PS-Adobe-2.0 EPSF-2.0
%%Title: kepler.pstex
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Fri Mar  8 20:33:48 2002
%%For: adrian@adis-pinguin (Adrian Freihofer)
%%BoundingBox: 0 0 108 74
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 74 moveto 0 0 lineto 108 0 lineto 108 74 lineto closepath clip newpath
-3.0 92.0 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def

% crosshatch30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<033003300c0c0c0c30033003c000c000300330030c0c0c0c
	0330033000c000c0033003300c0c0c0c30033003c000c000
	300330030c0c0c0c0330033000c000c0>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P3 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06299 0.06299 sc
%
% Fig objects follow
%
% Polyline
2 slj
7.500 slw
n 166 907 m 154 908 l 143 910 l 134 911 l 126 913 l 119 915 l
 113 917 l 108 919 l 104 922 l 101 924 l 98 927 l
 97 929 l 96 932 l 96 934 l 96 936 l 96 939 l
 97 941 l 98 947 l 99 953 l 101 960 l 103 967 l
 105 973 l 108 979 l 110 985 l 114 992 l 117 999 l
 122 1006 l 126 1013 l 130 1020 l 134 1027 l 139 1034 l
 145 1041 l 150 1049 l 156 1056 l 162 1063 l 168 1069 l
 175 1077 l 183 1084 l 191 1092 l 199 1098 l 206 1105 l
 213 1110 l 220 1116 l 229 1122 l 237 1128 l 246 1134 l
 255 1140 l 262 1145 l 269 1150 l 278 1155 l 287 1161 l
 296 1167 l 305 1172 l 314 1177 l 322 1182 l 330 1186 l
 338 1190 l 347 1194 l 355 1198 l 364 1202 l 372 1205 l
 380 1209 l 388 1212 l 392 1213 l 396 1214 l 400 1216 l
 404 1216 l 408 1217 l 413 1217 l 417 1217 l 422 1216 l
 427 1214 l 431 1211 l 436 1208 l 441 1203 l 445 1198 l
 450 1192 l 454 1184 l 459 1176 l 464 1165 l 469 1152 l
 474 1138 l 480 1122 l 485 1105 l 491 1086 l 496 1067 l
 502 1049 l 507 1030 l 512 1012 l 516 996 l 520 981 l
 523 968 l 526 956 l 527 950 l 529 945 l 530 940 l
 531 935 l 532 931 l 532 927 l 533 924 l 533 920 l
 532 917 l 532 914 l 531 912 l 529 910 l 528 908 l
 526 906 l 523 905 l 520 904 l 516 903 l 513 902 l
 508 901 l 503 901 l 498 900 l 492 900 l 486 900 l
 480 900 l 473 900 l 465 900 l 451 900 l 436 900 l
 419 900 l 400 900 l 381 900 l 359 900 l 337 901 l
 315 901 l 293 901 l 271 902 l 250 902 l 230 903 l
 212 904 l 195 905 l 180 906 l
 cp gs /PC [[0.00 0.00 0.00] [1.00 1.00 1.00]] def
15.00 15.00 sc P3 [16 0 0 -8 6.40 60.00]  PATmp PATsp ef gr PATusp gs col7 s gr 
% Polyline
n 1373 683 m 1401 677 l 1426 672 l 1449 668 l 1469 665 l 1488 663 l
 1504 662 l 1519 661 l 1531 661 l 1541 662 l 1550 663 l
 1557 665 l 1563 667 l 1567 670 l 1571 672 l 1574 675 l
 1577 678 l 1583 683 l 1589 688 l 1596 694 l 1603 700 l
 1610 706 l 1616 712 l 1622 717 l 1628 722 l 1629 724 l
 1631 726 l 1633 728 l 1634 730 l 1634 732 l 1633 734 l
 1632 737 l 1629 739 l 1625 742 l 1620 745 l 1613 748 l
 1604 751 l 1594 754 l 1582 757 l 1568 760 l 1552 764 l
 1535 767 l 1515 771 l 1494 775 l 1470 779 l 1450 782 l
 1428 785 l 1405 788 l 1380 792 l 1354 796 l 1326 800 l
 1297 804 l 1266 808 l 1235 812 l 1202 817 l 1169 821 l
 1135 826 l 1100 830 l 1066 835 l 1032 839 l 998 843 l
 966 847 l 934 851 l 903 855 l 873 859 l 845 862 l
 818 866 l 793 869 l 770 872 l 748 874 l 727 877 l
 715 878 l 704 880 l 693 881 l 682 882 l 672 884 l
 663 885 l 654 886 l 646 887 l 638 888 l 631 888 l
 624 889 l 618 890 l 612 890 l 607 891 l 603 891 l
 599 891 l 596 891 l 593 891 l 591 891 l 590 891 l
 589 891 l 589 890 l 589 889 l 590 889 l 592 888 l
 594 887 l 597 886 l 601 885 l 605 883 l 610 882 l
 615 880 l 621 878 l 627 877 l 634 875 l 641 873 l
 649 870 l 657 868 l 666 866 l 675 863 l 684 861 l
 694 858 l 705 855 l 723 850 l 743 845 l 763 839 l
 786 833 l 809 827 l 834 820 l 860 813 l 888 805 l
 916 798 l 945 790 l 975 782 l 1005 774 l 1036 766 l
 1067 758 l 1097 750 l 1127 742 l 1157 735 l 1185 728 l
 1213 721 l 1240 714 l 1265 708 l 1289 702 l 1312 697 l
 1333 692 l 1354 687 l
 cp gs /PC [[0.00 0.00 0.00] [1.00 1.00 1.00]] def
15.00 15.00 sc P1 [16 0 0 -8 39.27 44.07]  PATmp PATsp ef gr PATusp gs col7 s gr 
% Ellipse
n 1530 630 45 45 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 540 900 45 45 0 360 DrawEllipse gs 0.00 setgray ef gr gs col0 s gr

% Ellipse
n 900 900 810 405 0 360 DrawEllipse gs col0 s gr

% Polyline
0 slj
n 540 900 m
 90 900 l gs col0 s gr 
% Polyline
n 540 900 m
 450 1215 l gs col0 s gr 
% Polyline
n 585 900 m
 1530 630 l gs col0 s gr 
% Polyline
n 1530 630 m
 1395 450 l gs col0 s gr 
% Polyline
n 539 898 m
 1664 763 l gs col0 s gr 
% Polyline
gs  clippath
1732 345 m 1687 345 l 1687 449 l 1710 374 l 1732 449 l cp
eoclip
n 1710 900 m
 1710 360 l gs col0 s gr gr

% arrowhead
n 1732 449 m 1710 374 l 1687 449 l 1732 449 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
67 1455 m 112 1455 l 112 1351 l 90 1426 l 67 1351 l cp
eoclip
n 90 900 m
 90 1440 l gs col0 s gr gr

% arrowhead
n 67 1351 m 90 1426 l 112 1351 l 67 1351 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 945 720 m
 945 810 l gs col0 s gr 
% Polyline
n 450 1080 m
 540 1125 l gs col0 s gr 
% Polyline
n 540 810 m
 540 900 l gs col0 s gr 
% Polyline
gs  clippath
555 870 m 555 840 l 483 840 l 528 855 l 483 870 l cp
75 840 m 75 870 l 147 870 l 102 855 l 147 840 l cp
eoclip
n 90 855 m
 540 855 l gs col0 s gr gr

% arrowhead
n 147 840 m 102 855 l 147 870 l 147 840 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 483 870 m 528 855 l 483 840 l 483 870 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
gs  clippath
1725 960 m 1725 930 l 1653 930 l 1698 945 l 1653 960 l cp
525 930 m 525 960 l 597 960 l 552 945 l 597 930 l cp
eoclip
n 540 945 m
 1710 945 l gs col0 s gr gr

% arrowhead
n 597 930 m 552 945 l 597 960 l 597 930 l  cp gs 0.00 setgray ef gr  col0 s
% arrowhead
n 1653 960 m 1698 945 l 1653 930 l 1653 960 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
n 540 900 m
 630 720 l gs col0 s gr 
$F2psEnd
rs
end
